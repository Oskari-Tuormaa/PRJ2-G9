
x10_sender_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800200  00000900  00000994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000900  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  0080026a  0080026a  000009fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000175a  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010fb  00000000  00000000  000022aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000946  00000000  00000000  000033a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00003cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a0  00000000  00000000  00003ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a6  00000000  00000000  00004898  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000513e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
   6:	00 00       	nop
   8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c1       	rjmp	.+776    	; 0x316 <__vector_3>
   e:	00 00       	nop
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	00 00       	nop
  14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
  16:	00 00       	nop
  18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	00 00       	nop
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	00 00       	nop
  24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
  26:	00 00       	nop
  28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
  2e:	00 00       	nop
  30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
  36:	00 00       	nop
  38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
  42:	00 00       	nop
  44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
  4e:	00 00       	nop
  50:	fe c0       	rjmp	.+508    	; 0x24e <__vector_20>
  52:	00 00       	nop
  54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
  56:	00 00       	nop
  58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	72 c0       	rjmp	.+228    	; 0x142 <__bad_interrupt>
  5e:	00 00       	nop
  60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
  62:	00 00       	nop
  64:	88 c0       	rjmp	.+272    	; 0x176 <__vector_25>
  66:	00 00       	nop
  68:	6c c0       	rjmp	.+216    	; 0x142 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
  6e:	00 00       	nop
  70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
  72:	00 00       	nop
  74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
  76:	00 00       	nop
  78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
  7e:	00 00       	nop
  80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
  82:	00 00       	nop
  84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
  86:	00 00       	nop
  88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ee c0       	rjmp	.+476    	; 0x26a <__vector_35>
  8e:	00 00       	nop
  90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
  92:	00 00       	nop
  94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
  96:	00 00       	nop
  98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	05 c1       	rjmp	.+522    	; 0x2c0 <__vector_45>
  b6:	00 00       	nop
  b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
  be:	00 00       	nop
  c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
  da:	00 00       	nop
  dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
  de:	00 00       	nop
  e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	20 02       	muls	r18, r16

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
  f6:	12 e0       	ldi	r17, 0x02	; 2
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	e0 e0       	ldi	r30, 0x00	; 0
  fe:	f9 e0       	ldi	r31, 0x09	; 9
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0b bf       	out	0x3b, r16	; 59
 104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
 106:	07 90       	elpm	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	aa 36       	cpi	r26, 0x6A	; 106
 10c:	b1 07       	cpc	r27, r17
 10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	aa e6       	ldi	r26, 0x6A	; 106
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a4 3d       	cpi	r26, 0xD4	; 212
 11c:	b2 07       	cpc	r27, r18
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	c3 e7       	ldi	r28, 0x73	; 115
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	05 c0       	rjmp	.+10     	; 0x134 <__do_global_ctors+0x14>
 12a:	21 97       	sbiw	r28, 0x01	; 1
 12c:	01 09       	sbc	r16, r1
 12e:	80 2f       	mov	r24, r16
 130:	fe 01       	movw	r30, r28
 132:	4c d3       	rcall	.+1688   	; 0x7cc <__tablejump2__>
 134:	c2 37       	cpi	r28, 0x72	; 114
 136:	d1 07       	cpc	r29, r17
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 07       	cpc	r16, r24
 13c:	b1 f7       	brne	.-20     	; 0x12a <__do_global_ctors+0xa>
 13e:	26 d1       	rcall	.+588    	; 0x38c <main>
 140:	dd c3       	rjmp	.+1978   	; 0x8fc <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <_Z5delayi>:
bool active = false;
bool lightOn = false;


void delay(int t)
{
 144:	ac 01       	movw	r20, r24
	for (int i = 0; i < t; i++)
 146:	18 16       	cp	r1, r24
 148:	19 06       	cpc	r1, r25
 14a:	a4 f4       	brge	.+40     	; 0x174 <_Z5delayi+0x30>
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	6f ef       	ldi	r22, 0xFF	; 255
 152:	89 e6       	ldi	r24, 0x69	; 105
 154:	98 e1       	ldi	r25, 0x18	; 24
 156:	61 50       	subi	r22, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <_Z5delayi+0x12>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <_Z5delayi+0x1c>
 160:	00 00       	nop
	{
		_delay_ms(500);
		if (!active)
 162:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <active>
 166:	99 23       	and	r25, r25
 168:	29 f0       	breq	.+10     	; 0x174 <_Z5delayi+0x30>
bool lightOn = false;


void delay(int t)
{
	for (int i = 0; i < t; i++)
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	42 17       	cp	r20, r18
 170:	53 07       	cpc	r21, r19
 172:	71 f7       	brne	.-36     	; 0x150 <_Z5delayi+0xc>
 174:	08 95       	ret

00000176 <__vector_25>:
	}
}

// Received UART Message
ISR(USART0_RX_vect)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	0b b6       	in	r0, 0x3b	; 59
 182:	0f 92       	push	r0
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	cf 93       	push	r28
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	char com = ReadChar();
 19e:	c2 d2       	rcall	.+1412   	; 0x724 <_Z8ReadCharv>
 1a0:	c8 2f       	mov	r28, r24
	
	switch(com >> 4)
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	95 95       	asr	r25
 1a6:	87 95       	ror	r24
 1a8:	95 95       	asr	r25
 1aa:	87 95       	ror	r24
 1ac:	95 95       	asr	r25
 1ae:	87 95       	ror	r24
 1b0:	95 95       	asr	r25
 1b2:	87 95       	ror	r24
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	91 05       	cpc	r25, r1
 1b8:	89 f0       	breq	.+34     	; 0x1dc <__vector_25+0x66>
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	91 05       	cpc	r25, r1
 1be:	c9 f0       	breq	.+50     	; 0x1f2 <__vector_25+0x7c>
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	89 f5       	brne	.+98     	; 0x226 <__vector_25+0xb0>
	{
	case 1:
		SendChar('1');
 1c4:	81 e3       	ldi	r24, 0x31	; 49
 1c6:	b1 d2       	rcall	.+1378   	; 0x72a <_Z8SendCharc>
		lightOn = true;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <__data_end>
		x10Sender.sendCommand(ON , com & 0xF);
 1ce:	4c 2f       	mov	r20, r28
 1d0:	4f 70       	andi	r20, 0x0F	; 15
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	8c e6       	ldi	r24, 0x6C	; 108
 1d6:	92 e0       	ldi	r25, 0x02	; 2
 1d8:	bc d1       	rcall	.+888    	; 0x552 <_ZN6Sender11sendCommandE8Commandsc>
		break;
 1da:	25 c0       	rjmp	.+74     	; 0x226 <__vector_25+0xb0>
	case 2:
		SendChar('1');
 1dc:	81 e3       	ldi	r24, 0x31	; 49
 1de:	a5 d2       	rcall	.+1354   	; 0x72a <_Z8SendCharc>
 1e0:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <__data_end>
		lightOn = false;
 1e4:	4c 2f       	mov	r20, r28
		x10Sender.sendCommand(OFF, com & 0xF);
 1e6:	4f 70       	andi	r20, 0x0F	; 15
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	8c e6       	ldi	r24, 0x6C	; 108
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	b1 d1       	rcall	.+866    	; 0x552 <_ZN6Sender11sendCommandE8Commandsc>
 1f0:	1a c0       	rjmp	.+52     	; 0x226 <__vector_25+0xb0>
		break;
 1f2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <locked>
	case 3:
		if (locked)
 1f6:	88 23       	and	r24, r24
 1f8:	19 f0       	breq	.+6      	; 0x200 <__vector_25+0x8a>
			SendChar('0');
 1fa:	80 e3       	ldi	r24, 0x30	; 48
 1fc:	96 d2       	rcall	.+1324   	; 0x72a <_Z8SendCharc>
 1fe:	13 c0       	rjmp	.+38     	; 0x226 <__vector_25+0xb0>
 200:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <active>
		else
		{
			active = !active;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	89 27       	eor	r24, r25
 208:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <active>
 20c:	88 23       	and	r24, r24
			
			if (active)
 20e:	11 f0       	breq	.+4      	; 0x214 <__vector_25+0x9e>
 210:	2a 9a       	sbi	0x05, 2	; 5
				PORTB |= (1<<2);
 212:	01 c0       	rjmp	.+2      	; 0x216 <__vector_25+0xa0>
 214:	2a 98       	cbi	0x05, 2	; 5
			else
				PORTB &= ~(1<<2);
 216:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <active>
			
			SendChar(active ? 'A' : 'D');
 21a:	81 11       	cpse	r24, r1
 21c:	02 c0       	rjmp	.+4      	; 0x222 <__vector_25+0xac>
 21e:	84 e4       	ldi	r24, 0x44	; 68
 220:	01 c0       	rjmp	.+2      	; 0x224 <__vector_25+0xae>
 222:	81 e4       	ldi	r24, 0x41	; 65
 224:	82 d2       	rcall	.+1284   	; 0x72a <_Z8SendCharc>
 226:	ff 91       	pop	r31
		}
		break;
	}
}
 228:	ef 91       	pop	r30
 22a:	cf 91       	pop	r28
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	0f 90       	pop	r0
 242:	0b be       	out	0x3b, r0	; 59
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_20>:
 24e:	1f 92       	push	r1

// 1 ms after 120 kHz signal was started.
ISR(TIMER1_OVF_vect)
{
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
	// Turn off 120 kHz signal and timer.
	TCCR0B = 0b00000000;
 258:	15 bc       	out	0x25, r1	; 37
	TCCR1B = 0b00000000;
 25a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	
	// Make sure output is low.
	DDRB  &= 0b01111111;
 25e:	27 98       	cbi	0x04, 7	; 4
}
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <__vector_35>:

// 3.333 ms after zero cross.
ISR(TIMER3_OVF_vect)
{
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	0b b6       	in	r0, 0x3b	; 59
 276:	0f 92       	push	r0
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	// Turn off timer and initiate zero crossing.
	TCCR3B = 0b00000000;
 290:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	x10Sender.zeroCross();
 294:	8c e6       	ldi	r24, 0x6C	; 108
 296:	92 e0       	ldi	r25, 0x02	; 2
 298:	39 d1       	rcall	.+626    	; 0x50c <_ZN6Sender9zeroCrossEv>
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0b be       	out	0x3b, r0	; 59
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <__vector_45>:

// 6.667 ms after zero cross.
ISR(TIMER4_OVF_vect)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	0b b6       	in	r0, 0x3b	; 59
 2cc:	0f 92       	push	r0
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
	// Turn off timer and initiate zero crossing.
	TCCR4B = 0b00000000;
 2e6:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	x10Sender.zeroCross();
 2ea:	8c e6       	ldi	r24, 0x6C	; 108
 2ec:	92 e0       	ldi	r25, 0x02	; 2
 2ee:	0e d1       	rcall	.+540    	; 0x50c <_ZN6Sender9zeroCrossEv>
}
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	7f 91       	pop	r23
 2fe:	6f 91       	pop	r22
 300:	5f 91       	pop	r21
 302:	4f 91       	pop	r20
 304:	3f 91       	pop	r19
 306:	2f 91       	pop	r18
 308:	0f 90       	pop	r0
 30a:	0b be       	out	0x3b, r0	; 59
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <__vector_3>:

// Interrupt leg detects zero cross.
ISR(INT2_vect)
{
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	0b b6       	in	r0, 0x3b	; 59
 322:	0f 92       	push	r0
 324:	2f 93       	push	r18
 326:	3f 93       	push	r19
 328:	4f 93       	push	r20
 32a:	5f 93       	push	r21
 32c:	6f 93       	push	r22
 32e:	7f 93       	push	r23
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
 334:	af 93       	push	r26
 336:	bf 93       	push	r27
 338:	ef 93       	push	r30
 33a:	ff 93       	push	r31
	// Initiate zero crossing.
	x10Sender.zeroCross();
 33c:	8c e6       	ldi	r24, 0x6C	; 108
 33e:	92 e0       	ldi	r25, 0x02	; 2
 340:	e5 d0       	rcall	.+458    	; 0x50c <_ZN6Sender9zeroCrossEv>
	
	// Turn on 3.333 ms timer.
	TCCR3B = 0b00000001;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TCNT3  = 0xFFFF - 53333;
 348:	8a ea       	ldi	r24, 0xAA	; 170
 34a:	9f e2       	ldi	r25, 0x2F	; 47
 34c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 350:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	
	// Turn on 6.667 ms timer.
	TCCR4B = 0b00000011;
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	TCNT4  = 0xFFFF - 1666;
 35a:	8d e7       	ldi	r24, 0x7D	; 125
 35c:	99 ef       	ldi	r25, 0xF9	; 249
 35e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 362:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	7f 91       	pop	r23
 374:	6f 91       	pop	r22
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0b be       	out	0x3b, r0	; 59
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <main>:


int main(void)
{
	sei();
 38c:	78 94       	sei
	
	InitUART(9600, 8, 'N', 1);
 38e:	01 e0       	ldi	r16, 0x01	; 1
 390:	2e e4       	ldi	r18, 0x4E	; 78
 392:	48 e0       	ldi	r20, 0x08	; 8
 394:	60 e8       	ldi	r22, 0x80	; 128
 396:	75 e2       	ldi	r23, 0x25	; 37
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	34 d1       	rcall	.+616    	; 0x606 <_Z8InitUARTmhch>
	
	// Setup timer0 to transmit 120 kHz signal.
	TCCR0A = 0b01000010;
 39e:	82 e4       	ldi	r24, 0x42	; 66
 3a0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000000;
 3a2:	15 bc       	out	0x25, r1	; 37
	OCR0A  = 66;
 3a4:	87 bd       	out	0x27, r24	; 39
	
	// Setup timer1 for 1 ms delay.
	TCCR1A = 0b00000000;
 3a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0b00000000;
 3aa:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TIMSK1 = 0b00000001;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	
	// Setup timer3 for 3.333 ms delay.
	TCCR3A = 0b00000000;
 3b4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0b00000000;
 3b8:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TIMSK3 = 0b00000001;
 3bc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	
	// Setup timer4 for 6.667 ms delay.
	TCCR4A = 0b00000000;
 3c0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	TCCR4B = 0b00000000;
 3c4:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	TIMSK4 = 0b00000001;
 3c8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	
	// Setup int0 for Zero-Cross Detection
	EICRA = 0b00100000;
 3cc:	80 e2       	ldi	r24, 0x20	; 32
 3ce:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EIMSK = 0b00000100;
 3d2:	84 e0       	ldi	r24, 0x04	; 4
 3d4:	8d bb       	out	0x1d, r24	; 29
	
	DDRB = 0xFF;
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00;
 3da:	1a b8       	out	0x0a, r1	; 10
    
    while (1) 
    {
		if ((PINH & (1<<5)) != 0)
 3dc:	c0 e0       	ldi	r28, 0x00	; 0
 3de:	d1 e0       	ldi	r29, 0x01	; 1
			locked = false;
		else
			locked = true;
 3e0:	10 2f       	mov	r17, r16
			PORTB &= ~(1<<1);
			
		if (active)
		{
			int t = 1 + rand() % 9;
			delay(t);
 3e2:	0f 2e       	mov	r0, r31
 3e4:	f9 e0       	ldi	r31, 0x09	; 9
 3e6:	ef 2e       	mov	r14, r31
 3e8:	f1 2c       	mov	r15, r1
 3ea:	f0 2d       	mov	r31, r0
	DDRB = 0xFF;
	DDRD = 0x00;
    
    while (1) 
    {
		if ((PINH & (1<<5)) != 0)
 3ec:	88 81       	ld	r24, Y
 3ee:	85 ff       	sbrs	r24, 5
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <main+0x6e>
			locked = false;
 3f2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <locked>
		else
			locked = true;
		
	    if (!locked)
			PORTB |= (1<<1);
 3f6:	29 9a       	sbi	0x05, 1	; 5
 3f8:	03 c0       	rjmp	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>
    while (1) 
    {
		if ((PINH & (1<<5)) != 0)
			locked = false;
		else
			locked = true;
 3fa:	10 93 04 02 	sts	0x0204, r17	; 0x800204 <locked>
		
	    if (!locked)
			PORTB |= (1<<1);
	    else
			PORTB &= ~(1<<1);
 3fe:	29 98       	cbi	0x05, 1	; 5
			
		if (active)
 400:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <active>
 404:	88 23       	and	r24, r24
		{
			int t = 1 + rand() % 9;
 406:	91 f3       	breq	.-28     	; 0x3ec <main+0x60>
			delay(t);
 408:	30 d2       	rcall	.+1120   	; 0x86a <rand>
 40a:	b7 01       	movw	r22, r14
 40c:	96 d1       	rcall	.+812    	; 0x73a <__divmodhi4>
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	99 de       	rcall	.-718    	; 0x144 <_Z5delayi>
			if (active)
 412:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <active>
 416:	88 23       	and	r24, r24
 418:	49 f3       	breq	.-46     	; 0x3ec <main+0x60>
				lightOn = !lightOn;
 41a:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <__data_end>
 41e:	80 27       	eor	r24, r16
 420:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <__data_end>
			
			if (lightOn && active)
 424:	88 23       	and	r24, r24
 426:	31 f0       	breq	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				x10Sender.sendCommand(ON, 0b0110);
 428:	46 e0       	ldi	r20, 0x06	; 6
 42a:	62 e0       	ldi	r22, 0x02	; 2
 42c:	8c e6       	ldi	r24, 0x6C	; 108
 42e:	92 e0       	ldi	r25, 0x02	; 2
 430:	90 d0       	rcall	.+288    	; 0x552 <_ZN6Sender11sendCommandE8Commandsc>
 432:	dc cf       	rjmp	.-72     	; 0x3ec <main+0x60>
			else if (active)
				x10Sender.sendCommand(OFF, 0b0110);
 434:	46 e0       	ldi	r20, 0x06	; 6
 436:	63 e0       	ldi	r22, 0x03	; 3
 438:	8c e6       	ldi	r24, 0x6C	; 108
 43a:	92 e0       	ldi	r25, 0x02	; 2
 43c:	8a d0       	rcall	.+276    	; 0x552 <_ZN6Sender11sendCommandE8Commandsc>
 43e:	d6 cf       	rjmp	.-84     	; 0x3ec <main+0x60>

00000440 <_GLOBAL__sub_I_x10Sender>:
 440:	66 e0       	ldi	r22, 0x06	; 6
#include <util/delay.h>

#include "Sender.h"
#include "uart_int.h"

Sender x10Sender(0b0110);
 442:	8c e6       	ldi	r24, 0x6C	; 108
 444:	92 e0       	ldi	r25, 0x02	; 2
 446:	01 c0       	rjmp	.+2      	; 0x44a <_ZN6SenderC1Ec>
 448:	08 95       	ret

0000044a <_ZN6SenderC1Ec>:
#include "Sender.h"

Sender::Sender(char houseCode)
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
 452:	c5 56       	subi	r28, 0x65	; 101
 454:	d1 09       	sbc	r29, r1
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	de bf       	out	0x3e, r29	; 62
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	cd bf       	out	0x3d, r28	; 61
 460:	ac 01       	movw	r20, r24
{
	m_houseCode = houseCode;
 462:	fc 01       	movw	r30, r24
 464:	60 83       	st	Z, r22
	m_currentState = IDLE;
 466:	11 82       	std	Z+1, r1	; 0x01
		"1110000000000000000001"
		"1110000000000000000001"
		"000000"
		"1110000000000000000010"
		"1110000000000000000010"
		"000000";
 468:	85 e6       	ldi	r24, 0x65	; 101
 46a:	e5 e0       	ldi	r30, 0x05	; 5
 46c:	f2 e0       	ldi	r31, 0x02	; 2
 46e:	de 01       	movw	r26, r28
 470:	11 96       	adiw	r26, 0x01	; 1
 472:	01 90       	ld	r0, Z+
 474:	0d 92       	st	X+, r0
 476:	8a 95       	dec	r24
 478:	e1 f7       	brne	.-8      	; 0x472 <_ZN6SenderC1Ec+0x28>
 47a:	fe 01       	movw	r30, r28
 47c:	31 96       	adiw	r30, 0x01	; 1
 47e:	da 01       	movw	r26, r20
 480:	12 96       	adiw	r26, 0x02	; 2
 482:	9e 01       	movw	r18, r28
 484:	2a 59       	subi	r18, 0x9A	; 154
 486:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (int i = 0; i < 101; i++)
	{
		m_buffer[i] = temp[i];
 488:	91 91       	ld	r25, Z+
 48a:	9d 93       	st	X+, r25
		"000000"
		"1110000000000000000010"
		"1110000000000000000010"
		"000000";
	
	for (int i = 0; i < 101; i++)
 48c:	2e 17       	cp	r18, r30
 48e:	3f 07       	cpc	r19, r31
 490:	d9 f7       	brne	.-10     	; 0x488 <_ZN6SenderC1Ec+0x3e>
	
	// Loop through house code and add house code to buffer.
	for (int i = 0; i < 4; i++)
	{
		// If bit position 'i' of the house code is 1.
		if (((m_houseCode >> (3 - i)) & 1) == 1)
 492:	fa 01       	movw	r30, r20
 494:	60 81       	ld	r22, Z
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	da 01       	movw	r26, r20
 49a:	5c 96       	adiw	r26, 0x1c	; 28
 49c:	23 e0       	ldi	r18, 0x03	; 3
 49e:	30 e0       	ldi	r19, 0x00	; 0
			m_buffer[77 + i * 2] = '0';
		}
		// If bit position 'i' of the house code is 0.
		else
		{
			m_buffer[4  + i * 2] = '0';
 4a0:	90 e3       	ldi	r25, 0x30	; 48
			m_buffer[5  + i * 2] = '1';
 4a2:	81 e3       	ldi	r24, 0x31	; 49
	
	// Loop through house code and add house code to buffer.
	for (int i = 0; i < 4; i++)
	{
		// If bit position 'i' of the house code is 1.
		if (((m_houseCode >> (3 - i)) & 1) == 1)
 4a4:	ab 01       	movw	r20, r22
 4a6:	02 2e       	mov	r0, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <_ZN6SenderC1Ec+0x64>
 4aa:	55 95       	asr	r21
 4ac:	47 95       	ror	r20
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <_ZN6SenderC1Ec+0x60>
 4b2:	40 ff       	sbrs	r20, 0
 4b4:	0d c0       	rjmp	.+26     	; 0x4d0 <_ZN6SenderC1Ec+0x86>
		{
			m_buffer[4  + i * 2] = '1';
 4b6:	86 83       	std	Z+6, r24	; 0x06
			m_buffer[5  + i * 2] = '0';
 4b8:	97 83       	std	Z+7, r25	; 0x07
			
			m_buffer[26 + i * 2] = '1';
 4ba:	8c 93       	st	X, r24
			m_buffer[27 + i * 2] = '0';
 4bc:	95 8f       	std	Z+29, r25	; 0x1d
			
			m_buffer[54 + i * 2] = '1';
 4be:	80 af       	std	Z+56, r24	; 0x38
			m_buffer[55 + i * 2] = '0';
 4c0:	91 af       	std	Z+57, r25	; 0x39
			
			m_buffer[76 + i * 2] = '1';
 4c2:	d2 96       	adiw	r26, 0x32	; 50
 4c4:	8c 93       	st	X, r24
 4c6:	d2 97       	sbiw	r26, 0x32	; 50
			m_buffer[77 + i * 2] = '0';
 4c8:	d3 96       	adiw	r26, 0x33	; 51
 4ca:	9c 93       	st	X, r25
 4cc:	d3 97       	sbiw	r26, 0x33	; 51
 4ce:	0c c0       	rjmp	.+24     	; 0x4e8 <_ZN6SenderC1Ec+0x9e>
		}
		// If bit position 'i' of the house code is 0.
		else
		{
			m_buffer[4  + i * 2] = '0';
 4d0:	96 83       	std	Z+6, r25	; 0x06
			m_buffer[5  + i * 2] = '1';
 4d2:	87 83       	std	Z+7, r24	; 0x07
			
			m_buffer[26 + i * 2] = '0';
 4d4:	9c 93       	st	X, r25
			m_buffer[27 + i * 2] = '1';
 4d6:	85 8f       	std	Z+29, r24	; 0x1d
			
			m_buffer[54 + i * 2] = '0';
 4d8:	90 af       	std	Z+56, r25	; 0x38
			m_buffer[55 + i * 2] = '1';
 4da:	81 af       	std	Z+57, r24	; 0x39
			
			m_buffer[76 + i * 2] = '0';
 4dc:	d2 96       	adiw	r26, 0x32	; 50
 4de:	9c 93       	st	X, r25
 4e0:	d2 97       	sbiw	r26, 0x32	; 50
			m_buffer[77 + i * 2] = '1';
 4e2:	d3 96       	adiw	r26, 0x33	; 51
 4e4:	8c 93       	st	X, r24
 4e6:	d3 97       	sbiw	r26, 0x33	; 51
 4e8:	21 50       	subi	r18, 0x01	; 1
 4ea:	31 09       	sbc	r19, r1
 4ec:	32 96       	adiw	r30, 0x02	; 2
 4ee:	12 96       	adiw	r26, 0x02	; 2
	{
		m_buffer[i] = temp[i];
	}
	
	// Loop through house code and add house code to buffer.
	for (int i = 0; i < 4; i++)
 4f0:	2f 3f       	cpi	r18, 0xFF	; 255
 4f2:	4f ef       	ldi	r20, 0xFF	; 255
 4f4:	34 07       	cpc	r19, r20
 4f6:	b1 f6       	brne	.-84     	; 0x4a4 <_ZN6SenderC1Ec+0x5a>
			
			m_buffer[76 + i * 2] = '0';
			m_buffer[77 + i * 2] = '1';
		}
	}
}
 4f8:	cb 59       	subi	r28, 0x9B	; 155
 4fa:	df 4f       	sbci	r29, 0xFF	; 255
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	f8 94       	cli
 500:	de bf       	out	0x3e, r29	; 62
 502:	0f be       	out	0x3f, r0	; 63
 504:	cd bf       	out	0x3d, r28	; 61
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <_ZN6Sender9zeroCrossEv>:

void Sender::zeroCross()
{
	// If Unit doesn't have command to send, exit function.
	if (m_currentState == IDLE) return;
 50c:	fc 01       	movw	r30, r24
 50e:	21 81       	ldd	r18, Z+1	; 0x01
 510:	22 23       	and	r18, r18
 512:	f1 f0       	breq	.+60     	; 0x550 <_ZN6Sender9zeroCrossEv+0x44>
	
	// If next bit to send is '1', activate 120kHz signal.
	if (m_buffer[m_dynIndex] == '1')
 514:	e9 59       	subi	r30, 0x99	; 153
 516:	ff 4f       	sbci	r31, 0xFF	; 255
 518:	20 81       	ld	r18, Z
 51a:	fc 01       	movw	r30, r24
 51c:	e2 0f       	add	r30, r18
 51e:	f1 1d       	adc	r31, r1
 520:	22 81       	ldd	r18, Z+2	; 0x02
 522:	21 33       	cpi	r18, 0x31	; 49
 524:	59 f4       	brne	.+22     	; 0x53c <_ZN6Sender9zeroCrossEv+0x30>
	{
		TCCR0B = 0b00000001;
 526:	21 e0       	ldi	r18, 0x01	; 1
 528:	25 bd       	out	0x25, r18	; 37
		TCCR1B = 0b00000001;
 52a:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
		TCNT1  = 0xffff - 16000;
 52e:	2f e7       	ldi	r18, 0x7F	; 127
 530:	31 ec       	ldi	r19, 0xC1	; 193
 532:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 536:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
		DDRB  |= 0b10000000;
 53a:	27 9a       	sbi	0x04, 7	; 4
	}
	
	// Increment dynamic index.
	m_dynIndex++;
 53c:	fc 01       	movw	r30, r24
 53e:	e9 59       	subi	r30, 0x99	; 153
 540:	ff 4f       	sbci	r31, 0xFF	; 255
 542:	20 81       	ld	r18, Z
 544:	2f 5f       	subi	r18, 0xFF	; 255
 546:	20 83       	st	Z, r18
	
	// If we've reached the end of buffer, set state to IDLE.
	if (m_dynIndex > 100)
 548:	25 36       	cpi	r18, 0x65	; 101
 54a:	10 f0       	brcs	.+4      	; 0x550 <_ZN6Sender9zeroCrossEv+0x44>
	{
		m_currentState = IDLE;
 54c:	fc 01       	movw	r30, r24
 54e:	11 82       	std	Z+1, r1	; 0x01
 550:	08 95       	ret

00000552 <_ZN6Sender11sendCommandE8Commandsc>:
	}
}

void Sender::sendCommand(Commands command, char unit)
{
 552:	ef 92       	push	r14
 554:	ff 92       	push	r15
 556:	0f 93       	push	r16
 558:	1f 93       	push	r17
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	ec 01       	movw	r28, r24
	// If Unit is currently sending command, exit function.
	if (m_currentState == SENDING) return;
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	81 30       	cpi	r24, 0x01	; 1
 564:	09 f4       	brne	.+2      	; 0x568 <_ZN6Sender11sendCommandE8Commandsc+0x16>
 566:	48 c0       	rjmp	.+144    	; 0x5f8 <_ZN6Sender11sendCommandE8Commandsc+0xa6>
 568:	de 01       	movw	r26, r28
 56a:	1e 96       	adiw	r26, 0x0e	; 14
 56c:	fe 01       	movw	r30, r28
 56e:	b4 96       	adiw	r30, 0x24	; 36
 570:	23 e0       	ldi	r18, 0x03	; 3
 572:	30 e0       	ldi	r19, 0x00	; 0
	
	// Loop through unit and command. Add both to buffer.
	for (int i = 0; i < 4; i++)
	{
		// If bit position 'i' of unit is 1.
		if (((unit >> (3 - i)) & 1) == 1)
 574:	e4 2e       	mov	r14, r20
 576:	f1 2c       	mov	r15, r1
			m_buffer[35 + i * 2] = '0';
		}
		// If bit position 'i' of unit is 0.
		else
		{
			m_buffer[12 + i * 2] = '0';
 578:	50 e3       	ldi	r21, 0x30	; 48
			m_buffer[13 + i * 2] = '1';
 57a:	91 e3       	ldi	r25, 0x31	; 49
			m_buffer[34 + i * 2] = '0';
			m_buffer[35 + i * 2] = '1';
		}
		
		// If bit position 'i' of command is 1.
		if (((command >> (3 - i)) & 1) == 1)
 57c:	70 e0       	ldi	r23, 0x00	; 0
	
	// Loop through unit and command. Add both to buffer.
	for (int i = 0; i < 4; i++)
	{
		// If bit position 'i' of unit is 1.
		if (((unit >> (3 - i)) & 1) == 1)
 57e:	82 2f       	mov	r24, r18
 580:	87 01       	movw	r16, r14
 582:	02 2e       	mov	r0, r18
 584:	02 c0       	rjmp	.+4      	; 0x58a <_ZN6Sender11sendCommandE8Commandsc+0x38>
 586:	15 95       	asr	r17
 588:	07 95       	ror	r16
 58a:	0a 94       	dec	r0
 58c:	e2 f7       	brpl	.-8      	; 0x586 <_ZN6Sender11sendCommandE8Commandsc+0x34>
 58e:	00 ff       	sbrs	r16, 0
 590:	09 c0       	rjmp	.+18     	; 0x5a4 <_ZN6Sender11sendCommandE8Commandsc+0x52>
		{
			m_buffer[12 + i * 2] = '1';
 592:	9c 93       	st	X, r25
			m_buffer[13 + i * 2] = '0';
 594:	11 96       	adiw	r26, 0x01	; 1
 596:	5c 93       	st	X, r21
 598:	11 97       	sbiw	r26, 0x01	; 1
			
			m_buffer[34 + i * 2] = '1';
 59a:	90 83       	st	Z, r25
			m_buffer[35 + i * 2] = '0';
 59c:	57 96       	adiw	r26, 0x17	; 23
 59e:	5c 93       	st	X, r21
 5a0:	57 97       	sbiw	r26, 0x17	; 23
 5a2:	08 c0       	rjmp	.+16     	; 0x5b4 <_ZN6Sender11sendCommandE8Commandsc+0x62>
		}
		// If bit position 'i' of unit is 0.
		else
		{
			m_buffer[12 + i * 2] = '0';
 5a4:	5c 93       	st	X, r21
			m_buffer[13 + i * 2] = '1';
 5a6:	11 96       	adiw	r26, 0x01	; 1
 5a8:	9c 93       	st	X, r25
 5aa:	11 97       	sbiw	r26, 0x01	; 1
			
			m_buffer[34 + i * 2] = '0';
 5ac:	50 83       	st	Z, r21
			m_buffer[35 + i * 2] = '1';
 5ae:	57 96       	adiw	r26, 0x17	; 23
 5b0:	9c 93       	st	X, r25
 5b2:	57 97       	sbiw	r26, 0x17	; 23
		}
		
		// If bit position 'i' of command is 1.
		if (((command >> (3 - i)) & 1) == 1)
 5b4:	8b 01       	movw	r16, r22
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <_ZN6Sender11sendCommandE8Commandsc+0x6a>
 5b8:	15 95       	asr	r17
 5ba:	07 95       	ror	r16
 5bc:	8a 95       	dec	r24
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <_ZN6Sender11sendCommandE8Commandsc+0x66>
 5c0:	00 ff       	sbrs	r16, 0
 5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <_ZN6Sender11sendCommandE8Commandsc+0x80>
		{
			m_buffer[62 + i * 2] = '1';
 5c4:	94 8f       	std	Z+28, r25	; 0x1c
			m_buffer[63 + i * 2] = '0';
 5c6:	d3 96       	adiw	r26, 0x33	; 51
 5c8:	5c 93       	st	X, r21
 5ca:	d3 97       	sbiw	r26, 0x33	; 51
			
			m_buffer[84 + i * 2] = '1';
 5cc:	92 ab       	std	Z+50, r25	; 0x32
			m_buffer[85 + i * 2] = '0';
 5ce:	53 ab       	std	Z+51, r21	; 0x33
 5d0:	06 c0       	rjmp	.+12     	; 0x5de <_ZN6Sender11sendCommandE8Commandsc+0x8c>
		}
		// If bit position 'i' of command is 0.
		else
		{
			m_buffer[62 + i * 2] = '0';
 5d2:	54 8f       	std	Z+28, r21	; 0x1c
			m_buffer[63 + i * 2] = '1';
 5d4:	d3 96       	adiw	r26, 0x33	; 51
 5d6:	9c 93       	st	X, r25
 5d8:	d3 97       	sbiw	r26, 0x33	; 51
			
			m_buffer[84 + i * 2] = '0';
 5da:	52 ab       	std	Z+50, r21	; 0x32
			m_buffer[85 + i * 2] = '1';
 5dc:	93 ab       	std	Z+51, r25	; 0x33
 5de:	21 50       	subi	r18, 0x01	; 1
 5e0:	31 09       	sbc	r19, r1
 5e2:	12 96       	adiw	r26, 0x02	; 2
 5e4:	32 96       	adiw	r30, 0x02	; 2
{
	// If Unit is currently sending command, exit function.
	if (m_currentState == SENDING) return;
	
	// Loop through unit and command. Add both to buffer.
	for (int i = 0; i < 4; i++)
 5e6:	2f 3f       	cpi	r18, 0xFF	; 255
 5e8:	8f ef       	ldi	r24, 0xFF	; 255
 5ea:	38 07       	cpc	r19, r24
 5ec:	41 f6       	brne	.-112    	; 0x57e <_ZN6Sender11sendCommandE8Commandsc+0x2c>
			m_buffer[85 + i * 2] = '1';
		}
	}
	
	// Change state to SENDING.
	m_currentState = SENDING;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	89 83       	std	Y+1, r24	; 0x01
	
	// Reset dynamic index to 0.
	m_dynIndex = 0;
 5f2:	c9 59       	subi	r28, 0x99	; 153
 5f4:	df 4f       	sbci	r29, 0xFF	; 255
 5f6:	18 82       	st	Y, r1
}
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	1f 91       	pop	r17
 5fe:	0f 91       	pop	r16
 600:	ff 90       	pop	r15
 602:	ef 90       	pop	r14
 604:	08 95       	ret

00000606 <_Z8InitUARTmhch>:
Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
   return UCSR0A & (1<<7);
}
 606:	cf 92       	push	r12
 608:	df 92       	push	r13
 60a:	ef 92       	push	r14
 60c:	ff 92       	push	r15
 60e:	0f 93       	push	r16
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	c4 2f       	mov	r28, r20
 616:	d2 2f       	mov	r29, r18
 618:	6b 01       	movw	r12, r22
 61a:	7c 01       	movw	r14, r24
 61c:	2c e2       	ldi	r18, 0x2C	; 44
 61e:	c2 1a       	sub	r12, r18
 620:	21 e0       	ldi	r18, 0x01	; 1
 622:	d2 0a       	sbc	r13, r18
 624:	e1 08       	sbc	r14, r1
 626:	f1 08       	sbc	r15, r1
 628:	25 ed       	ldi	r18, 0xD5	; 213
 62a:	c2 16       	cp	r12, r18
 62c:	20 ec       	ldi	r18, 0xC0	; 192
 62e:	d2 06       	cpc	r13, r18
 630:	21 e0       	ldi	r18, 0x01	; 1
 632:	e2 06       	cpc	r14, r18
 634:	f1 04       	cpc	r15, r1
 636:	08 f0       	brcs	.+2      	; 0x63a <_Z8InitUARTmhch+0x34>
 638:	6d c0       	rjmp	.+218    	; 0x714 <_Z8InitUARTmhch+0x10e>
 63a:	2b ef       	ldi	r18, 0xFB	; 251
 63c:	24 0f       	add	r18, r20
 63e:	24 30       	cpi	r18, 0x04	; 4
 640:	08 f0       	brcs	.+2      	; 0x644 <_Z8InitUARTmhch+0x3e>
 642:	68 c0       	rjmp	.+208    	; 0x714 <_Z8InitUARTmhch+0x10e>
 644:	e0 ec       	ldi	r30, 0xC0	; 192
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	20 81       	ld	r18, Z
 64a:	2c 7f       	andi	r18, 0xFC	; 252
 64c:	20 83       	st	Z, r18
 64e:	28 e1       	ldi	r18, 0x18	; 24
 650:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 654:	e2 ec       	ldi	r30, 0xC2	; 194
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	20 81       	ld	r18, Z
 65a:	10 82       	st	Z, r1
 65c:	dc 01       	movw	r26, r24
 65e:	cb 01       	movw	r24, r22
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	aa 1f       	adc	r26, r26
 666:	bb 1f       	adc	r27, r27
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	aa 1f       	adc	r26, r26
 66e:	bb 1f       	adc	r27, r27
 670:	9c 01       	movw	r18, r24
 672:	ad 01       	movw	r20, r26
 674:	22 0f       	add	r18, r18
 676:	33 1f       	adc	r19, r19
 678:	44 1f       	adc	r20, r20
 67a:	55 1f       	adc	r21, r21
 67c:	22 0f       	add	r18, r18
 67e:	33 1f       	adc	r19, r19
 680:	44 1f       	adc	r20, r20
 682:	55 1f       	adc	r21, r21
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	74 e2       	ldi	r23, 0x24	; 36
 688:	84 ef       	ldi	r24, 0xF4	; 244
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	69 d0       	rcall	.+210    	; 0x760 <__udivmodsi4>
 68e:	21 50       	subi	r18, 0x01	; 1
 690:	31 09       	sbc	r19, r1
 692:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 696:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 69a:	c6 30       	cpi	r28, 0x06	; 6
 69c:	71 f0       	breq	.+28     	; 0x6ba <_Z8InitUARTmhch+0xb4>
 69e:	18 f4       	brcc	.+6      	; 0x6a6 <_Z8InitUARTmhch+0xa0>
 6a0:	c5 30       	cpi	r28, 0x05	; 5
 6a2:	31 f0       	breq	.+12     	; 0x6b0 <_Z8InitUARTmhch+0xaa>
 6a4:	1b c0       	rjmp	.+54     	; 0x6dc <_Z8InitUARTmhch+0xd6>
 6a6:	c7 30       	cpi	r28, 0x07	; 7
 6a8:	71 f0       	breq	.+28     	; 0x6c6 <_Z8InitUARTmhch+0xc0>
 6aa:	c8 30       	cpi	r28, 0x08	; 8
 6ac:	91 f0       	breq	.+36     	; 0x6d2 <_Z8InitUARTmhch+0xcc>
 6ae:	16 c0       	rjmp	.+44     	; 0x6dc <_Z8InitUARTmhch+0xd6>
 6b0:	e2 ec       	ldi	r30, 0xC2	; 194
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	80 83       	st	Z, r24
 6b8:	11 c0       	rjmp	.+34     	; 0x6dc <_Z8InitUARTmhch+0xd6>
 6ba:	e2 ec       	ldi	r30, 0xC2	; 194
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	82 60       	ori	r24, 0x02	; 2
 6c2:	80 83       	st	Z, r24
 6c4:	0b c0       	rjmp	.+22     	; 0x6dc <_Z8InitUARTmhch+0xd6>
 6c6:	e2 ec       	ldi	r30, 0xC2	; 194
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	80 81       	ld	r24, Z
 6cc:	84 60       	ori	r24, 0x04	; 4
 6ce:	80 83       	st	Z, r24
 6d0:	05 c0       	rjmp	.+10     	; 0x6dc <_Z8InitUARTmhch+0xd6>
 6d2:	e2 ec       	ldi	r30, 0xC2	; 194
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	86 60       	ori	r24, 0x06	; 6
 6da:	80 83       	st	Z, r24
 6dc:	d5 34       	cpi	r29, 0x45	; 69
 6de:	19 f0       	breq	.+6      	; 0x6e6 <_Z8InitUARTmhch+0xe0>
 6e0:	df 34       	cpi	r29, 0x4F	; 79
 6e2:	39 f0       	breq	.+14     	; 0x6f2 <_Z8InitUARTmhch+0xec>
 6e4:	0c c0       	rjmp	.+24     	; 0x6fe <_Z8InitUARTmhch+0xf8>
 6e6:	e2 ec       	ldi	r30, 0xC2	; 194
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	80 62       	ori	r24, 0x20	; 32
 6ee:	80 83       	st	Z, r24
 6f0:	0a c0       	rjmp	.+20     	; 0x706 <_Z8InitUARTmhch+0x100>
 6f2:	e2 ec       	ldi	r30, 0xC2	; 194
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	80 63       	ori	r24, 0x30	; 48
 6fa:	80 83       	st	Z, r24
 6fc:	04 c0       	rjmp	.+8      	; 0x706 <_Z8InitUARTmhch+0x100>
 6fe:	e2 ec       	ldi	r30, 0xC2	; 194
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	80 83       	st	Z, r24
 706:	00 23       	and	r16, r16
 708:	29 f0       	breq	.+10     	; 0x714 <_Z8InitUARTmhch+0x10e>
 70a:	e1 ec       	ldi	r30, 0xC1	; 193
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	80 68       	ori	r24, 0x80	; 128
 712:	80 83       	st	Z, r24
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	0f 91       	pop	r16
 71a:	ff 90       	pop	r15
 71c:	ef 90       	pop	r14
 71e:	df 90       	pop	r13
 720:	cf 90       	pop	r12
 722:	08 95       	ret

00000724 <_Z8ReadCharv>:
{
   while(!CharReady)
   {
	   continue;
   }
   return UDR0;
 724:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 728:	08 95       	ret

0000072a <_Z8SendCharc>:
Parameter:
  Tegn: Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
   while((UCSR0A & (1<<5)) == 0)
 72a:	e0 ec       	ldi	r30, 0xC0	; 192
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	90 81       	ld	r25, Z
 730:	95 ff       	sbrs	r25, 5
 732:	fd cf       	rjmp	.-6      	; 0x72e <_Z8SendCharc+0x4>
   {
	   continue;
   }
   UDR0 = Tegn;
 734:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 738:	08 95       	ret

0000073a <__divmodhi4>:
 73a:	97 fb       	bst	r25, 7
 73c:	07 2e       	mov	r0, r23
 73e:	16 f4       	brtc	.+4      	; 0x744 <__divmodhi4+0xa>
 740:	00 94       	com	r0
 742:	06 d0       	rcall	.+12     	; 0x750 <__divmodhi4_neg1>
 744:	77 fd       	sbrc	r23, 7
 746:	08 d0       	rcall	.+16     	; 0x758 <__divmodhi4_neg2>
 748:	2d d0       	rcall	.+90     	; 0x7a4 <__udivmodhi4>
 74a:	07 fc       	sbrc	r0, 7
 74c:	05 d0       	rcall	.+10     	; 0x758 <__divmodhi4_neg2>
 74e:	3e f4       	brtc	.+14     	; 0x75e <__divmodhi4_exit>

00000750 <__divmodhi4_neg1>:
 750:	90 95       	com	r25
 752:	81 95       	neg	r24
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	08 95       	ret

00000758 <__divmodhi4_neg2>:
 758:	70 95       	com	r23
 75a:	61 95       	neg	r22
 75c:	7f 4f       	sbci	r23, 0xFF	; 255

0000075e <__divmodhi4_exit>:
 75e:	08 95       	ret

00000760 <__udivmodsi4>:
 760:	a1 e2       	ldi	r26, 0x21	; 33
 762:	1a 2e       	mov	r1, r26
 764:	aa 1b       	sub	r26, r26
 766:	bb 1b       	sub	r27, r27
 768:	fd 01       	movw	r30, r26
 76a:	0d c0       	rjmp	.+26     	; 0x786 <__udivmodsi4_ep>

0000076c <__udivmodsi4_loop>:
 76c:	aa 1f       	adc	r26, r26
 76e:	bb 1f       	adc	r27, r27
 770:	ee 1f       	adc	r30, r30
 772:	ff 1f       	adc	r31, r31
 774:	a2 17       	cp	r26, r18
 776:	b3 07       	cpc	r27, r19
 778:	e4 07       	cpc	r30, r20
 77a:	f5 07       	cpc	r31, r21
 77c:	20 f0       	brcs	.+8      	; 0x786 <__udivmodsi4_ep>
 77e:	a2 1b       	sub	r26, r18
 780:	b3 0b       	sbc	r27, r19
 782:	e4 0b       	sbc	r30, r20
 784:	f5 0b       	sbc	r31, r21

00000786 <__udivmodsi4_ep>:
 786:	66 1f       	adc	r22, r22
 788:	77 1f       	adc	r23, r23
 78a:	88 1f       	adc	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	1a 94       	dec	r1
 790:	69 f7       	brne	.-38     	; 0x76c <__udivmodsi4_loop>
 792:	60 95       	com	r22
 794:	70 95       	com	r23
 796:	80 95       	com	r24
 798:	90 95       	com	r25
 79a:	9b 01       	movw	r18, r22
 79c:	ac 01       	movw	r20, r24
 79e:	bd 01       	movw	r22, r26
 7a0:	cf 01       	movw	r24, r30
 7a2:	08 95       	ret

000007a4 <__udivmodhi4>:
 7a4:	aa 1b       	sub	r26, r26
 7a6:	bb 1b       	sub	r27, r27
 7a8:	51 e1       	ldi	r21, 0x11	; 17
 7aa:	07 c0       	rjmp	.+14     	; 0x7ba <__udivmodhi4_ep>

000007ac <__udivmodhi4_loop>:
 7ac:	aa 1f       	adc	r26, r26
 7ae:	bb 1f       	adc	r27, r27
 7b0:	a6 17       	cp	r26, r22
 7b2:	b7 07       	cpc	r27, r23
 7b4:	10 f0       	brcs	.+4      	; 0x7ba <__udivmodhi4_ep>
 7b6:	a6 1b       	sub	r26, r22
 7b8:	b7 0b       	sbc	r27, r23

000007ba <__udivmodhi4_ep>:
 7ba:	88 1f       	adc	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	5a 95       	dec	r21
 7c0:	a9 f7       	brne	.-22     	; 0x7ac <__udivmodhi4_loop>
 7c2:	80 95       	com	r24
 7c4:	90 95       	com	r25
 7c6:	bc 01       	movw	r22, r24
 7c8:	cd 01       	movw	r24, r26
 7ca:	08 95       	ret

000007cc <__tablejump2__>:
 7cc:	ee 0f       	add	r30, r30
 7ce:	ff 1f       	adc	r31, r31
 7d0:	88 1f       	adc	r24, r24
 7d2:	8b bf       	out	0x3b, r24	; 59
 7d4:	07 90       	elpm	r0, Z+
 7d6:	f6 91       	elpm	r31, Z
 7d8:	e0 2d       	mov	r30, r0
 7da:	19 94       	eijmp

000007dc <do_rand>:
 7dc:	8f 92       	push	r8
 7de:	9f 92       	push	r9
 7e0:	af 92       	push	r10
 7e2:	bf 92       	push	r11
 7e4:	cf 92       	push	r12
 7e6:	df 92       	push	r13
 7e8:	ef 92       	push	r14
 7ea:	ff 92       	push	r15
 7ec:	cf 93       	push	r28
 7ee:	df 93       	push	r29
 7f0:	ec 01       	movw	r28, r24
 7f2:	68 81       	ld	r22, Y
 7f4:	79 81       	ldd	r23, Y+1	; 0x01
 7f6:	8a 81       	ldd	r24, Y+2	; 0x02
 7f8:	9b 81       	ldd	r25, Y+3	; 0x03
 7fa:	61 15       	cp	r22, r1
 7fc:	71 05       	cpc	r23, r1
 7fe:	81 05       	cpc	r24, r1
 800:	91 05       	cpc	r25, r1
 802:	21 f4       	brne	.+8      	; 0x80c <do_rand+0x30>
 804:	64 e2       	ldi	r22, 0x24	; 36
 806:	79 ed       	ldi	r23, 0xD9	; 217
 808:	8b e5       	ldi	r24, 0x5B	; 91
 80a:	97 e0       	ldi	r25, 0x07	; 7
 80c:	2d e1       	ldi	r18, 0x1D	; 29
 80e:	33 ef       	ldi	r19, 0xF3	; 243
 810:	41 e0       	ldi	r20, 0x01	; 1
 812:	50 e0       	ldi	r21, 0x00	; 0
 814:	38 d0       	rcall	.+112    	; 0x886 <__divmodsi4>
 816:	49 01       	movw	r8, r18
 818:	5a 01       	movw	r10, r20
 81a:	9b 01       	movw	r18, r22
 81c:	ac 01       	movw	r20, r24
 81e:	a7 ea       	ldi	r26, 0xA7	; 167
 820:	b1 e4       	ldi	r27, 0x41	; 65
 822:	4d d0       	rcall	.+154    	; 0x8be <__muluhisi3>
 824:	6b 01       	movw	r12, r22
 826:	7c 01       	movw	r14, r24
 828:	ac ee       	ldi	r26, 0xEC	; 236
 82a:	b4 ef       	ldi	r27, 0xF4	; 244
 82c:	a5 01       	movw	r20, r10
 82e:	94 01       	movw	r18, r8
 830:	52 d0       	rcall	.+164    	; 0x8d6 <__mulohisi3>
 832:	dc 01       	movw	r26, r24
 834:	cb 01       	movw	r24, r22
 836:	8c 0d       	add	r24, r12
 838:	9d 1d       	adc	r25, r13
 83a:	ae 1d       	adc	r26, r14
 83c:	bf 1d       	adc	r27, r15
 83e:	b7 ff       	sbrs	r27, 7
 840:	03 c0       	rjmp	.+6      	; 0x848 <do_rand+0x6c>
 842:	01 97       	sbiw	r24, 0x01	; 1
 844:	a1 09       	sbc	r26, r1
 846:	b0 48       	sbci	r27, 0x80	; 128
 848:	88 83       	st	Y, r24
 84a:	99 83       	std	Y+1, r25	; 0x01
 84c:	aa 83       	std	Y+2, r26	; 0x02
 84e:	bb 83       	std	Y+3, r27	; 0x03
 850:	9f 77       	andi	r25, 0x7F	; 127
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	ff 90       	pop	r15
 858:	ef 90       	pop	r14
 85a:	df 90       	pop	r13
 85c:	cf 90       	pop	r12
 85e:	bf 90       	pop	r11
 860:	af 90       	pop	r10
 862:	9f 90       	pop	r9
 864:	8f 90       	pop	r8
 866:	08 95       	ret

00000868 <rand_r>:
 868:	b9 cf       	rjmp	.-142    	; 0x7dc <do_rand>

0000086a <rand>:
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	92 e0       	ldi	r25, 0x02	; 2
 86e:	b6 cf       	rjmp	.-148    	; 0x7dc <do_rand>

00000870 <srand>:
 870:	a0 e0       	ldi	r26, 0x00	; 0
 872:	b0 e0       	ldi	r27, 0x00	; 0
 874:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 878:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 87c:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
 880:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
 884:	08 95       	ret

00000886 <__divmodsi4>:
 886:	05 2e       	mov	r0, r21
 888:	97 fb       	bst	r25, 7
 88a:	16 f4       	brtc	.+4      	; 0x890 <__divmodsi4+0xa>
 88c:	00 94       	com	r0
 88e:	0f d0       	rcall	.+30     	; 0x8ae <__negsi2>
 890:	57 fd       	sbrc	r21, 7
 892:	05 d0       	rcall	.+10     	; 0x89e <__divmodsi4_neg2>
 894:	65 df       	rcall	.-310    	; 0x760 <__udivmodsi4>
 896:	07 fc       	sbrc	r0, 7
 898:	02 d0       	rcall	.+4      	; 0x89e <__divmodsi4_neg2>
 89a:	46 f4       	brtc	.+16     	; 0x8ac <__divmodsi4_exit>
 89c:	08 c0       	rjmp	.+16     	; 0x8ae <__negsi2>

0000089e <__divmodsi4_neg2>:
 89e:	50 95       	com	r21
 8a0:	40 95       	com	r20
 8a2:	30 95       	com	r19
 8a4:	21 95       	neg	r18
 8a6:	3f 4f       	sbci	r19, 0xFF	; 255
 8a8:	4f 4f       	sbci	r20, 0xFF	; 255
 8aa:	5f 4f       	sbci	r21, 0xFF	; 255

000008ac <__divmodsi4_exit>:
 8ac:	08 95       	ret

000008ae <__negsi2>:
 8ae:	90 95       	com	r25
 8b0:	80 95       	com	r24
 8b2:	70 95       	com	r23
 8b4:	61 95       	neg	r22
 8b6:	7f 4f       	sbci	r23, 0xFF	; 255
 8b8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ba:	9f 4f       	sbci	r25, 0xFF	; 255
 8bc:	08 95       	ret

000008be <__muluhisi3>:
 8be:	0f d0       	rcall	.+30     	; 0x8de <__umulhisi3>
 8c0:	a5 9f       	mul	r26, r21
 8c2:	90 0d       	add	r25, r0
 8c4:	b4 9f       	mul	r27, r20
 8c6:	90 0d       	add	r25, r0
 8c8:	a4 9f       	mul	r26, r20
 8ca:	80 0d       	add	r24, r0
 8cc:	91 1d       	adc	r25, r1
 8ce:	11 24       	eor	r1, r1
 8d0:	08 95       	ret

000008d2 <__mulshisi3>:
 8d2:	b7 ff       	sbrs	r27, 7
 8d4:	f4 cf       	rjmp	.-24     	; 0x8be <__muluhisi3>

000008d6 <__mulohisi3>:
 8d6:	f3 df       	rcall	.-26     	; 0x8be <__muluhisi3>
 8d8:	82 1b       	sub	r24, r18
 8da:	93 0b       	sbc	r25, r19
 8dc:	08 95       	ret

000008de <__umulhisi3>:
 8de:	a2 9f       	mul	r26, r18
 8e0:	b0 01       	movw	r22, r0
 8e2:	b3 9f       	mul	r27, r19
 8e4:	c0 01       	movw	r24, r0
 8e6:	a3 9f       	mul	r26, r19
 8e8:	70 0d       	add	r23, r0
 8ea:	81 1d       	adc	r24, r1
 8ec:	11 24       	eor	r1, r1
 8ee:	91 1d       	adc	r25, r1
 8f0:	b2 9f       	mul	r27, r18
 8f2:	70 0d       	add	r23, r0
 8f4:	81 1d       	adc	r24, r1
 8f6:	11 24       	eor	r1, r1
 8f8:	91 1d       	adc	r25, r1
 8fa:	08 95       	ret

000008fc <_exit>:
 8fc:	f8 94       	cli

000008fe <__stop_program>:
 8fe:	ff cf       	rjmp	.-2      	; 0x8fe <__stop_program>

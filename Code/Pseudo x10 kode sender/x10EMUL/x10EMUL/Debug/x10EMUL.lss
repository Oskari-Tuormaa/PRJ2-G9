
x10EMUL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000118  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000775  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bb  00000000  00000000  00000a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fa  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_1>
   8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_2>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 80 00 	call	0x100	; 0x100 <main>
  8e:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_1>:
char code[] = "1110011010010110100101111001101001011010010100000011100110100101011010101110011010010101101010000000"; // OFF
unsigned char index = 101;


ISR(INT0_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
	if (code[index] == '0')
  a8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	ef 5f       	subi	r30, 0xFF	; 255
  b0:	fe 4f       	sbci	r31, 0xFE	; 254
  b2:	80 81       	ld	r24, Z
  b4:	80 33       	cpi	r24, 0x30	; 48
  b6:	41 f4       	brne	.+16     	; 0xc8 <__vector_1+0x32>
	{
		PORTB &= ~(1<<5);
  b8:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f e9       	ldi	r24, 0x9F	; 159
  bc:	9f e0       	ldi	r25, 0x0F	; 15
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <__vector_1+0x28>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <__vector_1+0x2e>
  c4:	00 00       	nop
		_delay_ms(1);
		PORTB |= (1<<5);
  c6:	2d 9a       	sbi	0x05, 5	; 5
	}
	
	if (!(index > ARRAY_LENGTH))
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  cc:	85 36       	cpi	r24, 0x65	; 101
  ce:	18 f4       	brcc	.+6      	; 0xd6 <__vector_1+0x40>
		index++;
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_2>:

ISR(INT1_vect)
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
	index = 0;
  f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
}
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <main>:

int main(void)
{
	sei();
 100:	78 94       	sei
	
	DDRB = 0xff;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<5);
 106:	2d 9a       	sbi	0x05, 5	; 5
	
	EICRA = 0b00001010;
 108:	8a e0       	ldi	r24, 0x0A	; 10
 10a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000011;
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	8d bb       	out	0x1d, r24	; 29
 112:	ff cf       	rjmp	.-2      	; 0x112 <main+0x12>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>

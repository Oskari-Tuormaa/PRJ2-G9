
x10 Modtager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00000506  0000059a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000506  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080020a  0080020a  000005a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001668  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000103b  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000762  00000000  00000000  00002d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  000034dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000881  00000000  00000000  0000373c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000764  00000000  00000000  00003fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004721  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	f5 c0       	rjmp	.+490    	; 0x1f0 <__vector_1>
   6:	00 00       	nop
   8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
   a:	00 00       	nop
   c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
   e:	00 00       	nop
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	00 00       	nop
  14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
  16:	00 00       	nop
  18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	00 00       	nop
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	00 00       	nop
  24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
  26:	00 00       	nop
  28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
  2e:	00 00       	nop
  30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
  36:	00 00       	nop
  38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
  42:	00 00       	nop
  44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
  4e:	00 00       	nop
  50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
  52:	00 00       	nop
  54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
  56:	00 00       	nop
  58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	72 c0       	rjmp	.+228    	; 0x142 <__bad_interrupt>
  5e:	00 00       	nop
  60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
  62:	00 00       	nop
  64:	6e c0       	rjmp	.+220    	; 0x142 <__bad_interrupt>
  66:	00 00       	nop
  68:	6c c0       	rjmp	.+216    	; 0x142 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
  6e:	00 00       	nop
  70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
  72:	00 00       	nop
  74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
  76:	00 00       	nop
  78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
  7e:	00 00       	nop
  80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
  82:	00 00       	nop
  84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
  86:	00 00       	nop
  88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5b c0       	rjmp	.+182    	; 0x144 <__vector_35>
  8e:	00 00       	nop
  90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
  92:	00 00       	nop
  94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
  96:	00 00       	nop
  98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	72 c0       	rjmp	.+228    	; 0x19a <__vector_45>
  b6:	00 00       	nop
  b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
  be:	00 00       	nop
  c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
  da:	00 00       	nop
  dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
  de:	00 00       	nop
  e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	40 01       	movw	r8, r0

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
  f6:	12 e0       	ldi	r17, 0x02	; 2
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	e6 e0       	ldi	r30, 0x06	; 6
  fe:	f5 e0       	ldi	r31, 0x05	; 5
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0b bf       	out	0x3b, r16	; 59
 104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
 106:	07 90       	elpm	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	aa 30       	cpi	r26, 0x0A	; 10
 10c:	b1 07       	cpc	r27, r17
 10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	aa e0       	ldi	r26, 0x0A	; 10
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a4 31       	cpi	r26, 0x14	; 20
 11c:	b2 07       	cpc	r27, r18
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	c3 e7       	ldi	r28, 0x73	; 115
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	05 c0       	rjmp	.+10     	; 0x134 <__do_global_ctors+0x14>
 12a:	21 97       	sbiw	r28, 0x01	; 1
 12c:	01 09       	sbc	r16, r1
 12e:	80 2f       	mov	r24, r16
 130:	fe 01       	movw	r30, r28
 132:	df d1       	rcall	.+958    	; 0x4f2 <__tablejump2__>
 134:	c2 37       	cpi	r28, 0x72	; 114
 136:	d1 07       	cpc	r29, r17
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 07       	cpc	r16, r24
 13c:	b1 f7       	brne	.-20     	; 0x12a <__do_global_ctors+0xa>
 13e:	81 d0       	rcall	.+258    	; 0x242 <main>
 140:	e0 c1       	rjmp	.+960    	; 0x502 <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <__vector_35>:
x10Reciever x10rec(0b01101001, 0b01101001);


// 3.333 ms after zero cross.
ISR(TIMER3_OVF_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	0b b6       	in	r0, 0x3b	; 59
 150:	0f 92       	push	r0
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	// Turn off timer and read.
	TCCR3B = 0b00000000;
 16a:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	x10rec.read();
 16e:	8a e0       	ldi	r24, 0x0A	; 10
 170:	92 e0       	ldi	r25, 0x02	; 2
 172:	28 d1       	rcall	.+592    	; 0x3c4 <_ZN11x10Reciever4readEv>
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0b be       	out	0x3b, r0	; 59
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_45>:

// 6.667 ms after zero cross.
ISR(TIMER4_OVF_vect)
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	0b b6       	in	r0, 0x3b	; 59
 1a6:	0f 92       	push	r0
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	// Turn off timer and read.
	TCCR4B = 0b00000000;
 1c0:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	x10rec.read();
 1c4:	8a e0       	ldi	r24, 0x0A	; 10
 1c6:	92 e0       	ldi	r25, 0x02	; 2
 1c8:	fd d0       	rcall	.+506    	; 0x3c4 <_ZN11x10Reciever4readEv>
}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0b be       	out	0x3b, r0	; 59
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_1>:

// Interrupt leg detects zero cross.
ISR(INT0_vect)
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	0b b6       	in	r0, 0x3b	; 59
 1fc:	0f 92       	push	r0
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
	// Initiate read.
	x10rec.read();
 216:	8a e0       	ldi	r24, 0x0A	; 10
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	d4 d0       	rcall	.+424    	; 0x3c4 <_ZN11x10Reciever4readEv>
	//TCNT3  = 0xFFFF - 53333;
	
	// Turn on 6.667 ms timer.
	//TCCR4B = 0b00000011;
	//TCNT4  = 0xFFFF - 1666;
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0b be       	out	0x3b, r0	; 59
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <main>:

int main(void)
{
	sei();
 242:	78 94       	sei
	
	InitUART(9600, 8, 0);
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	48 e0       	ldi	r20, 0x08	; 8
 248:	60 e8       	ldi	r22, 0x80	; 128
 24a:	75 e2       	ldi	r23, 0x25	; 37
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	1d d0       	rcall	.+58     	; 0x28c <_Z8InitUARTmhc>
	
	// Setup timer3 for 2.778 ms delay.
	TCCR3A = 0b00000000;
 252:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0b00000000;
 256:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TIMSK3 = 0b00000001;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	
	// Setup timer4 for 5.556 ms delay.
	TCCR4A = 0b00000000;
 260:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	TCCR4B = 0b00000000;
 264:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	TIMSK4 = 0b00000001;
 268:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	
	// Setup int0 for Zero-Cross Detection
	EICRA = 0b00000010;
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EIMSK = 0b00000001;
 272:	8d bb       	out	0x1d, r24	; 29
	
	DDRA = 0x00;
 274:	11 b8       	out	0x01, r1	; 1
	DDRB = 0b11111111;
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00;
 27a:	1a b8       	out	0x0a, r1	; 10
	DDRF = 0xff;
 27c:	80 bb       	out	0x10, r24	; 16
 27e:	ff cf       	rjmp	.-2      	; 0x27e <main+0x3c>

00000280 <_GLOBAL__sub_I_x10rec>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "x10Reciever.h"


x10Reciever x10rec(0b01101001, 0b01101001);
 280:	49 e6       	ldi	r20, 0x69	; 105
 282:	69 e6       	ldi	r22, 0x69	; 105
 284:	8a e0       	ldi	r24, 0x0A	; 10
 286:	92 e0       	ldi	r25, 0x02	; 2
 288:	94 c0       	rjmp	.+296    	; 0x3b2 <_ZN11x10RecieverC1Ehh>
 28a:	08 95       	ret

0000028c <_Z8InitUARTmhc>:
   while(!CharReady)
   {
	   continue;
   }
   return UDR0;
}
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	c4 2f       	mov	r28, r20
 296:	d2 2f       	mov	r29, r18
 298:	8b 01       	movw	r16, r22
 29a:	9c 01       	movw	r18, r24
 29c:	0c 52       	subi	r16, 0x2C	; 44
 29e:	11 40       	sbci	r17, 0x01	; 1
 2a0:	21 09       	sbc	r18, r1
 2a2:	31 09       	sbc	r19, r1
 2a4:	05 3d       	cpi	r16, 0xD5	; 213
 2a6:	10 4c       	sbci	r17, 0xC0	; 192
 2a8:	21 40       	sbci	r18, 0x01	; 1
 2aa:	31 05       	cpc	r19, r1
 2ac:	08 f0       	brcs	.+2      	; 0x2b0 <_Z8InitUARTmhc+0x24>
 2ae:	66 c0       	rjmp	.+204    	; 0x37c <_Z8InitUARTmhc+0xf0>
 2b0:	2b ef       	ldi	r18, 0xFB	; 251
 2b2:	2c 0f       	add	r18, r28
 2b4:	24 30       	cpi	r18, 0x04	; 4
 2b6:	08 f0       	brcs	.+2      	; 0x2ba <_Z8InitUARTmhc+0x2e>
 2b8:	61 c0       	rjmp	.+194    	; 0x37c <_Z8InitUARTmhc+0xf0>
 2ba:	e0 ec       	ldi	r30, 0xC0	; 192
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	20 81       	ld	r18, Z
 2c0:	2c 7f       	andi	r18, 0xFC	; 252
 2c2:	20 83       	st	Z, r18
 2c4:	28 e1       	ldi	r18, 0x18	; 24
 2c6:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 2ca:	e2 ec       	ldi	r30, 0xC2	; 194
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	20 81       	ld	r18, Z
 2d0:	10 82       	st	Z, r1
 2d2:	dc 01       	movw	r26, r24
 2d4:	cb 01       	movw	r24, r22
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	aa 1f       	adc	r26, r26
 2dc:	bb 1f       	adc	r27, r27
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	aa 1f       	adc	r26, r26
 2e4:	bb 1f       	adc	r27, r27
 2e6:	9c 01       	movw	r18, r24
 2e8:	ad 01       	movw	r20, r26
 2ea:	22 0f       	add	r18, r18
 2ec:	33 1f       	adc	r19, r19
 2ee:	44 1f       	adc	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	44 1f       	adc	r20, r20
 2f8:	55 1f       	adc	r21, r21
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	74 e2       	ldi	r23, 0x24	; 36
 2fe:	84 ef       	ldi	r24, 0xF4	; 244
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	d5 d0       	rcall	.+426    	; 0x4ae <__udivmodsi4>
 304:	21 50       	subi	r18, 0x01	; 1
 306:	31 09       	sbc	r19, r1
 308:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 30c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 310:	c6 30       	cpi	r28, 0x06	; 6
 312:	71 f0       	breq	.+28     	; 0x330 <_Z8InitUARTmhc+0xa4>
 314:	18 f4       	brcc	.+6      	; 0x31c <_Z8InitUARTmhc+0x90>
 316:	c5 30       	cpi	r28, 0x05	; 5
 318:	31 f0       	breq	.+12     	; 0x326 <_Z8InitUARTmhc+0x9a>
 31a:	1b c0       	rjmp	.+54     	; 0x352 <_Z8InitUARTmhc+0xc6>
 31c:	c7 30       	cpi	r28, 0x07	; 7
 31e:	71 f0       	breq	.+28     	; 0x33c <_Z8InitUARTmhc+0xb0>
 320:	c8 30       	cpi	r28, 0x08	; 8
 322:	91 f0       	breq	.+36     	; 0x348 <_Z8InitUARTmhc+0xbc>
 324:	16 c0       	rjmp	.+44     	; 0x352 <_Z8InitUARTmhc+0xc6>
 326:	e2 ec       	ldi	r30, 0xC2	; 194
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	80 83       	st	Z, r24
 32e:	11 c0       	rjmp	.+34     	; 0x352 <_Z8InitUARTmhc+0xc6>
 330:	e2 ec       	ldi	r30, 0xC2	; 194
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	82 60       	ori	r24, 0x02	; 2
 338:	80 83       	st	Z, r24
 33a:	0b c0       	rjmp	.+22     	; 0x352 <_Z8InitUARTmhc+0xc6>
 33c:	e2 ec       	ldi	r30, 0xC2	; 194
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	84 60       	ori	r24, 0x04	; 4
 344:	80 83       	st	Z, r24
 346:	05 c0       	rjmp	.+10     	; 0x352 <_Z8InitUARTmhc+0xc6>
 348:	e2 ec       	ldi	r30, 0xC2	; 194
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	86 60       	ori	r24, 0x06	; 6
 350:	80 83       	st	Z, r24
 352:	d5 34       	cpi	r29, 0x45	; 69
 354:	19 f0       	breq	.+6      	; 0x35c <_Z8InitUARTmhc+0xd0>
 356:	df 34       	cpi	r29, 0x4F	; 79
 358:	39 f0       	breq	.+14     	; 0x368 <_Z8InitUARTmhc+0xdc>
 35a:	0c c0       	rjmp	.+24     	; 0x374 <_Z8InitUARTmhc+0xe8>
 35c:	e2 ec       	ldi	r30, 0xC2	; 194
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	80 62       	ori	r24, 0x20	; 32
 364:	80 83       	st	Z, r24
 366:	0a c0       	rjmp	.+20     	; 0x37c <_Z8InitUARTmhc+0xf0>
 368:	e2 ec       	ldi	r30, 0xC2	; 194
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	80 63       	ori	r24, 0x30	; 48
 370:	80 83       	st	Z, r24
 372:	04 c0       	rjmp	.+8      	; 0x37c <_Z8InitUARTmhc+0xf0>
 374:	e2 ec       	ldi	r30, 0xC2	; 194
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	80 83       	st	Z, r24
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret

00000386 <_Z8SendCharc>:
Parameter:
  Tegn: Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
   while((UCSR0A & (1<<5)) == 0)
 386:	e0 ec       	ldi	r30, 0xC0	; 192
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	90 81       	ld	r25, Z
 38c:	95 ff       	sbrs	r25, 5
 38e:	fd cf       	rjmp	.-6      	; 0x38a <_Z8SendCharc+0x4>
   {
	   continue;
   }
   UDR0 = Tegn;
 390:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 394:	08 95       	ret

00000396 <_Z10SendStringPc>:
Sends 0 terminated string.
Parameter:
  Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	ec 01       	movw	r28, r24
   while(*Streng != 0)
 39c:	88 81       	ld	r24, Y
 39e:	88 23       	and	r24, r24
 3a0:	29 f0       	breq	.+10     	; 0x3ac <_Z10SendStringPc+0x16>
 3a2:	21 96       	adiw	r28, 0x01	; 1
   {
	   SendChar(*Streng);
 3a4:	f0 df       	rcall	.-32     	; 0x386 <_Z8SendCharc>
Parameter:
  Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
   while(*Streng != 0)
 3a6:	89 91       	ld	r24, Y+
 3a8:	81 11       	cpse	r24, r1
 3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <_Z10SendStringPc+0xe>
   {
	   SendChar(*Streng);
	   Streng++;
   }
}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <_ZN11x10RecieverC1Ehh>:
*/


#include "x10Reciever.h"

x10Reciever::x10Reciever(unsigned char houseCode, unsigned char unitNum)
 3b2:	fc 01       	movw	r30, r24
{
	m_state = IDLE;
 3b4:	10 82       	st	Z, r1
	m_houseCode = houseCode;
 3b6:	62 83       	std	Z+2, r22	; 0x02
	m_unitNum = unitNum;
 3b8:	41 83       	std	Z+1, r20	; 0x01
	
	m_sBuffer = 0;
 3ba:	14 82       	std	Z+4, r1	; 0x04
	m_data[0] = 0;
 3bc:	15 82       	std	Z+5, r1	; 0x05
	m_data[1] = 0;
 3be:	16 82       	std	Z+6, r1	; 0x06
	
	m_count = 0;
 3c0:	10 86       	std	Z+8, r1	; 0x08
 3c2:	08 95       	ret

000003c4 <_ZN11x10Reciever4readEv>:
}

void x10Reciever::read()
{
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	fc 01       	movw	r30, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ca:	8f ec       	ldi	r24, 0xCF	; 207
 3cc:	97 e0       	ldi	r25, 0x07	; 7
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <_ZN11x10Reciever4readEv+0xa>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <_ZN11x10Reciever4readEv+0x10>
 3d4:	00 00       	nop
	_delay_ms(0.5);
	switch(m_state)
 3d6:	80 81       	ld	r24, Z
 3d8:	88 23       	and	r24, r24
 3da:	19 f0       	breq	.+6      	; 0x3e2 <_ZN11x10Reciever4readEv+0x1e>
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	d1 f0       	breq	.+52     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3e0:	63 c0       	rjmp	.+198    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	{
	case IDLE:
		// Add new value to small buffer.
		m_sBuffer = m_sBuffer << 1;
 3e2:	84 81       	ldd	r24, Z+4	; 0x04
 3e4:	88 0f       	add	r24, r24
 3e6:	84 83       	std	Z+4, r24	; 0x04
		
		PORTF |= 1;
 3e8:	88 9a       	sbi	0x11, 0	; 17
 3ea:	8f e8       	ldi	r24, 0x8F	; 143
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <_ZN11x10Reciever4readEv+0x2a>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <_ZN11x10Reciever4readEv+0x30>
 3f4:	00 00       	nop
		_delay_ms(0.1);
		PORTF &= ~1;
 3f6:	88 98       	cbi	0x11, 0	; 17
		
		if ((PIND & 2) != 0)
 3f8:	49 9b       	sbis	0x09, 1	; 9
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			m_sBuffer |= 1;
 3fc:	84 81       	ldd	r24, Z+4	; 0x04
 3fe:	81 60       	ori	r24, 0x01	; 1
 400:	84 83       	std	Z+4, r24	; 0x04
		}
		
		// If the correct start bit sequence is read, enter Recieving state.
		if ((m_sBuffer & 0b00001111) == 0b00001110)
 402:	84 81       	ldd	r24, Z+4	; 0x04
 404:	8f 70       	andi	r24, 0x0F	; 15
 406:	8e 30       	cpi	r24, 0x0E	; 14
 408:	09 f0       	breq	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	4e c0       	rjmp	.+156    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		{
			m_state = RECIEVING;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	80 83       	st	Z, r24
			m_count = 0;
 410:	10 86       	std	Z+8, r1	; 0x08
 412:	4a c0       	rjmp	.+148    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		}
		break;
		
	case RECIEVING:
		// Add carry from [0] to [1] in data array.
		m_data[1] = m_data[1] << 1;
 414:	96 81       	ldd	r25, Z+6	; 0x06
 416:	99 0f       	add	r25, r25
 418:	96 83       	std	Z+6, r25	; 0x06
		if ((m_data[0] & (1 << 7)) != 0)
 41a:	85 81       	ldd	r24, Z+5	; 0x05
 41c:	88 23       	and	r24, r24
 41e:	14 f4       	brge	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			m_data[1] |= 1;
 420:	91 60       	ori	r25, 0x01	; 1
 422:	96 83       	std	Z+6, r25	; 0x06
	
		// Add carry from suffix to [0] in data array.
		m_data[0] = m_data[0] << 1;
 424:	98 2f       	mov	r25, r24
 426:	99 0f       	add	r25, r25
 428:	95 83       	std	Z+5, r25	; 0x05
		if ((m_suffix & 0b10) != 0)
 42a:	87 81       	ldd	r24, Z+7	; 0x07
 42c:	81 ff       	sbrs	r24, 1
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			m_data[0] |= 1;
 430:	91 60       	ori	r25, 0x01	; 1
 432:	95 83       	std	Z+5, r25	; 0x05
		
		// Add new value to suffix.
		m_suffix = m_suffix << 1;
 434:	88 0f       	add	r24, r24
 436:	87 83       	std	Z+7, r24	; 0x07
		if ((PIND & 2) != 0)
 438:	49 9b       	sbis	0x09, 1	; 9
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			m_suffix |= 1;
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	87 83       	std	Z+7, r24	; 0x07
		
		// Increment counter.
		m_count++;
 440:	80 85       	ldd	r24, Z+8	; 0x08
 442:	8f 5f       	subi	r24, 0xFF	; 255
 444:	80 87       	std	Z+8, r24	; 0x08
		
		// If both m_data and m_suffix is filled.
		if (m_count >= 18)
 446:	82 31       	cpi	r24, 0x12	; 18
 448:	78 f1       	brcs	.+94     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		{
			m_state = IDLE;
 44a:	10 82       	st	Z, r1
			//SendChar(' ');
			//SendBits(m_data[1], 8);
			//SendChar('\n');
			
			// If house code doesn't match, ignore message.
			if (m_houseCode != m_data[1])
 44c:	92 81       	ldd	r25, Z+2	; 0x02
 44e:	86 81       	ldd	r24, Z+6	; 0x06
 450:	98 13       	cpse	r25, r24
 452:	2a c0       	rjmp	.+84     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
				return;
			
			switch(m_suffix & 0b11)
 454:	87 81       	ldd	r24, Z+7	; 0x07
 456:	83 70       	andi	r24, 0x03	; 3
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	19 f0       	breq	.+6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	51 f0       	breq	.+20     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 460:	23 c0       	rjmp	.+70     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
			{
			// Suffix == UNIT CODE.
			case 0b01:
				// If message IS for this unit.
				if (m_unitNum == m_data[0])
 462:	91 81       	ldd	r25, Z+1	; 0x01
 464:	85 81       	ldd	r24, Z+5	; 0x05
 466:	98 13       	cpse	r25, r24
 468:	03 c0       	rjmp	.+6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
					m_isActive = true;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	83 83       	std	Z+3, r24	; 0x03
 46e:	1c c0       	rjmp	.+56     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
				// If message is NOT for this unit.
				else
				{
					m_isActive = false;
 470:	13 82       	std	Z+3, r1	; 0x03
 472:	1a c0       	rjmp	.+52     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
				}
				break;
			
			// Suffix == COMMAND CODE.
			case 0b10:
				m_comCount++;
 474:	81 85       	ldd	r24, Z+9	; 0x09
 476:	8f 5f       	subi	r24, 0xFF	; 255
 478:	81 87       	std	Z+9, r24	; 0x09
			
				// If reciever HASN'T been activated --> Message ISN'T for this unit.
				if (!m_isActive)
 47a:	93 81       	ldd	r25, Z+3	; 0x03
 47c:	99 23       	and	r25, r25
 47e:	a1 f0       	breq	.+40     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
					return;
				
				// If this is the first recieved command, ignore.
				if (m_comCount < 2)
 480:	82 30       	cpi	r24, 0x02	; 2
 482:	90 f0       	brcs	.+36     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 484:	ef 01       	movw	r28, r30
					return;
				// Do given command.
				switch (m_data[0])
 486:	85 81       	ldd	r24, Z+5	; 0x05
 488:	89 35       	cpi	r24, 0x59	; 89
 48a:	19 f0       	breq	.+6      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48c:	8a 35       	cpi	r24, 0x5A	; 90
 48e:	39 f0       	breq	.+14     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 490:	0a c0       	rjmp	.+20     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
void x10Reciever::execute(Command command)
{
	switch (command)
	{
	case ON:
		SendString("ON\n");
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	92 e0       	ldi	r25, 0x02	; 2
 496:	7f df       	rcall	.-258    	; 0x396 <_Z10SendStringPc>
		PORTB = 0xff;
 498:	8f ef       	ldi	r24, 0xFF	; 255
 49a:	85 b9       	out	0x05, r24	; 5
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
		break;
		
	case OFF:
		SendString("OFF\n");
 49e:	84 e0       	ldi	r24, 0x04	; 4
 4a0:	92 e0       	ldi	r25, 0x02	; 2
 4a2:	79 df       	rcall	.-270    	; 0x396 <_Z10SendStringPc>
		PORTB = 0x00;
 4a4:	15 b8       	out	0x05, r1	; 5
				
				case OFF:
					execute(OFF);
					break;
				}
				m_comCount = 0;
 4a6:	19 86       	std	Y+9, r1	; 0x09
				break;
			}
		}
		break;
	}
}
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <__udivmodsi4>:
 4ae:	a1 e2       	ldi	r26, 0x21	; 33
 4b0:	1a 2e       	mov	r1, r26
 4b2:	aa 1b       	sub	r26, r26
 4b4:	bb 1b       	sub	r27, r27
 4b6:	fd 01       	movw	r30, r26
 4b8:	0d c0       	rjmp	.+26     	; 0x4d4 <__udivmodsi4_ep>

000004ba <__udivmodsi4_loop>:
 4ba:	aa 1f       	adc	r26, r26
 4bc:	bb 1f       	adc	r27, r27
 4be:	ee 1f       	adc	r30, r30
 4c0:	ff 1f       	adc	r31, r31
 4c2:	a2 17       	cp	r26, r18
 4c4:	b3 07       	cpc	r27, r19
 4c6:	e4 07       	cpc	r30, r20
 4c8:	f5 07       	cpc	r31, r21
 4ca:	20 f0       	brcs	.+8      	; 0x4d4 <__udivmodsi4_ep>
 4cc:	a2 1b       	sub	r26, r18
 4ce:	b3 0b       	sbc	r27, r19
 4d0:	e4 0b       	sbc	r30, r20
 4d2:	f5 0b       	sbc	r31, r21

000004d4 <__udivmodsi4_ep>:
 4d4:	66 1f       	adc	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	88 1f       	adc	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	1a 94       	dec	r1
 4de:	69 f7       	brne	.-38     	; 0x4ba <__udivmodsi4_loop>
 4e0:	60 95       	com	r22
 4e2:	70 95       	com	r23
 4e4:	80 95       	com	r24
 4e6:	90 95       	com	r25
 4e8:	9b 01       	movw	r18, r22
 4ea:	ac 01       	movw	r20, r24
 4ec:	bd 01       	movw	r22, r26
 4ee:	cf 01       	movw	r24, r30
 4f0:	08 95       	ret

000004f2 <__tablejump2__>:
 4f2:	ee 0f       	add	r30, r30
 4f4:	ff 1f       	adc	r31, r31
 4f6:	88 1f       	adc	r24, r24
 4f8:	8b bf       	out	0x3b, r24	; 59
 4fa:	07 90       	elpm	r0, Z+
 4fc:	f6 91       	elpm	r31, Z
 4fe:	e0 2d       	mov	r30, r0
 500:	19 94       	eijmp

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>


x10 Modtager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000038a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000316  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800200  00800200  0000038a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000111d  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000df3  00000000  00000000  00001589  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000420  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000279c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f7  00000000  00000000  0000291c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b2  00000000  00000000  00003013  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000032c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	e8 c0       	rjmp	.+464    	; 0x1d6 <__vector_1>
   6:	00 00       	nop
   8:	8f c0       	rjmp	.+286    	; 0x128 <__bad_interrupt>
   a:	00 00       	nop
   c:	8d c0       	rjmp	.+282    	; 0x128 <__bad_interrupt>
   e:	00 00       	nop
  10:	8b c0       	rjmp	.+278    	; 0x128 <__bad_interrupt>
  12:	00 00       	nop
  14:	89 c0       	rjmp	.+274    	; 0x128 <__bad_interrupt>
  16:	00 00       	nop
  18:	87 c0       	rjmp	.+270    	; 0x128 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	85 c0       	rjmp	.+266    	; 0x128 <__bad_interrupt>
  1e:	00 00       	nop
  20:	83 c0       	rjmp	.+262    	; 0x128 <__bad_interrupt>
  22:	00 00       	nop
  24:	81 c0       	rjmp	.+258    	; 0x128 <__bad_interrupt>
  26:	00 00       	nop
  28:	7f c0       	rjmp	.+254    	; 0x128 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7d c0       	rjmp	.+250    	; 0x128 <__bad_interrupt>
  2e:	00 00       	nop
  30:	7b c0       	rjmp	.+246    	; 0x128 <__bad_interrupt>
  32:	00 00       	nop
  34:	79 c0       	rjmp	.+242    	; 0x128 <__bad_interrupt>
  36:	00 00       	nop
  38:	77 c0       	rjmp	.+238    	; 0x128 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	75 c0       	rjmp	.+234    	; 0x128 <__bad_interrupt>
  3e:	00 00       	nop
  40:	73 c0       	rjmp	.+230    	; 0x128 <__bad_interrupt>
  42:	00 00       	nop
  44:	71 c0       	rjmp	.+226    	; 0x128 <__bad_interrupt>
  46:	00 00       	nop
  48:	6f c0       	rjmp	.+222    	; 0x128 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6d c0       	rjmp	.+218    	; 0x128 <__bad_interrupt>
  4e:	00 00       	nop
  50:	6b c0       	rjmp	.+214    	; 0x128 <__bad_interrupt>
  52:	00 00       	nop
  54:	69 c0       	rjmp	.+210    	; 0x128 <__bad_interrupt>
  56:	00 00       	nop
  58:	67 c0       	rjmp	.+206    	; 0x128 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	65 c0       	rjmp	.+202    	; 0x128 <__bad_interrupt>
  5e:	00 00       	nop
  60:	63 c0       	rjmp	.+198    	; 0x128 <__bad_interrupt>
  62:	00 00       	nop
  64:	61 c0       	rjmp	.+194    	; 0x128 <__bad_interrupt>
  66:	00 00       	nop
  68:	5f c0       	rjmp	.+190    	; 0x128 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5d c0       	rjmp	.+186    	; 0x128 <__bad_interrupt>
  6e:	00 00       	nop
  70:	5b c0       	rjmp	.+182    	; 0x128 <__bad_interrupt>
  72:	00 00       	nop
  74:	59 c0       	rjmp	.+178    	; 0x128 <__bad_interrupt>
  76:	00 00       	nop
  78:	57 c0       	rjmp	.+174    	; 0x128 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	55 c0       	rjmp	.+170    	; 0x128 <__bad_interrupt>
  7e:	00 00       	nop
  80:	53 c0       	rjmp	.+166    	; 0x128 <__bad_interrupt>
  82:	00 00       	nop
  84:	51 c0       	rjmp	.+162    	; 0x128 <__bad_interrupt>
  86:	00 00       	nop
  88:	4f c0       	rjmp	.+158    	; 0x128 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4e c0       	rjmp	.+156    	; 0x12a <__vector_35>
  8e:	00 00       	nop
  90:	4b c0       	rjmp	.+150    	; 0x128 <__bad_interrupt>
  92:	00 00       	nop
  94:	49 c0       	rjmp	.+146    	; 0x128 <__bad_interrupt>
  96:	00 00       	nop
  98:	47 c0       	rjmp	.+142    	; 0x128 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	45 c0       	rjmp	.+138    	; 0x128 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	43 c0       	rjmp	.+134    	; 0x128 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	41 c0       	rjmp	.+130    	; 0x128 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3f c0       	rjmp	.+126    	; 0x128 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3d c0       	rjmp	.+122    	; 0x128 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	3b c0       	rjmp	.+118    	; 0x128 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	65 c0       	rjmp	.+202    	; 0x180 <__vector_45>
  b6:	00 00       	nop
  b8:	37 c0       	rjmp	.+110    	; 0x128 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	35 c0       	rjmp	.+106    	; 0x128 <__bad_interrupt>
  be:	00 00       	nop
  c0:	33 c0       	rjmp	.+102    	; 0x128 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	31 c0       	rjmp	.+98     	; 0x128 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2f c0       	rjmp	.+94     	; 0x128 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2d c0       	rjmp	.+90     	; 0x128 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	2b c0       	rjmp	.+86     	; 0x128 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	29 c0       	rjmp	.+82     	; 0x128 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	27 c0       	rjmp	.+78     	; 0x128 <__bad_interrupt>
  da:	00 00       	nop
  dc:	25 c0       	rjmp	.+74     	; 0x128 <__bad_interrupt>
  de:	00 00       	nop
  e0:	23 c0       	rjmp	.+70     	; 0x128 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	3c 01       	movw	r6, r24

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_clear_bss>:
  f6:	22 e0       	ldi	r18, 0x02	; 2
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a9 30       	cpi	r26, 0x09	; 9
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>

00000106 <__do_global_ctors>:
 106:	10 e0       	ldi	r17, 0x00	; 0
 108:	c3 e7       	ldi	r28, 0x73	; 115
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	00 e0       	ldi	r16, 0x00	; 0
 10e:	05 c0       	rjmp	.+10     	; 0x11a <__do_global_ctors+0x14>
 110:	21 97       	sbiw	r28, 0x01	; 1
 112:	01 09       	sbc	r16, r1
 114:	80 2f       	mov	r24, r16
 116:	fe 01       	movw	r30, r28
 118:	f4 d0       	rcall	.+488    	; 0x302 <__tablejump2__>
 11a:	c2 37       	cpi	r28, 0x72	; 114
 11c:	d1 07       	cpc	r29, r17
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 07       	cpc	r16, r24
 122:	b1 f7       	brne	.-20     	; 0x110 <__do_global_ctors+0xa>
 124:	93 d0       	rcall	.+294    	; 0x24c <main>
 126:	f5 c0       	rjmp	.+490    	; 0x312 <_exit>

00000128 <__bad_interrupt>:
 128:	6b cf       	rjmp	.-298    	; 0x0 <__vectors>

0000012a <__vector_35>:
x10Reciever x10rec(0b0110, 0b0110);


// 3.333 ms after zero cross.
ISR(TIMER3_OVF_vect)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	0b b6       	in	r0, 0x3b	; 59
 136:	0f 92       	push	r0
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	// Turn off timer and read.
	TCCR3B = 0b00000000;
 150:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	x10rec.read();
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	92 e0       	ldi	r25, 0x02	; 2
 158:	9e d0       	rcall	.+316    	; 0x296 <_ZN11x10Reciever4readEv>
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0b be       	out	0x3b, r0	; 59
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__vector_45>:

// 6.667 ms after zero cross.
ISR(TIMER4_OVF_vect)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	0b b6       	in	r0, 0x3b	; 59
 18c:	0f 92       	push	r0
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	// Turn off timer and read.
	TCCR4B = 0b00000000;
 1a6:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	x10rec.read();
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	92 e0       	ldi	r25, 0x02	; 2
 1ae:	73 d0       	rcall	.+230    	; 0x296 <_ZN11x10Reciever4readEv>
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0b be       	out	0x3b, r0	; 59
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_1>:

// Interrupt leg detects zero cross.
ISR(INT0_vect)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	0b b6       	in	r0, 0x3b	; 59
 1e2:	0f 92       	push	r0
 1e4:	2f 93       	push	r18
 1e6:	3f 93       	push	r19
 1e8:	4f 93       	push	r20
 1ea:	5f 93       	push	r21
 1ec:	6f 93       	push	r22
 1ee:	7f 93       	push	r23
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	af 93       	push	r26
 1f6:	bf 93       	push	r27
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
	// Initiate read.
	x10rec.read();
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	92 e0       	ldi	r25, 0x02	; 2
 200:	4a d0       	rcall	.+148    	; 0x296 <_ZN11x10Reciever4readEv>
	
	// Turn on 3.333 ms timer.
	TCCR3B = 0b00000001;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TCNT3  = 0xFFFF - 53333;
 208:	8a ea       	ldi	r24, 0xAA	; 170
 20a:	9f e2       	ldi	r25, 0x2F	; 47
 20c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 210:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	
	// Turn on 6.667 ms timer.
	TCCR4B = 0b00000011;
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	TCNT4  = 0xFFFF - 1666;
 21a:	8d e7       	ldi	r24, 0x7D	; 125
 21c:	99 ef       	ldi	r25, 0xF9	; 249
 21e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 222:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
}
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0b be       	out	0x3b, r0	; 59
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <main>:

int main(void)
{
	sei();
 24c:	78 94       	sei
	
	// Setup timer3 for 2.778 ms delay.
	TCCR3A = 0b00000000;
 24e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0b00000000;
 252:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TIMSK3 = 0b00000001;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	
	// Setup timer4 for 5.556 ms delay.
	TCCR4A = 0b00000000;
 25c:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	TCCR4B = 0b00000000;
 260:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	TIMSK4 = 0b00000001;
 264:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	
	// Setup int0 for Zero-Cross Detection
	EICRA = 0b00000010;
 268:	92 e0       	ldi	r25, 0x02	; 2
 26a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EIMSK = 0b00000001;
 26e:	8d bb       	out	0x1d, r24	; 29
	
	DDRA = 0x00;
 270:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x00;
 272:	14 b8       	out	0x04, r1	; 4
	DDRD = 0x00;
 274:	1a b8       	out	0x0a, r1	; 10
 276:	ff cf       	rjmp	.-2      	; 0x276 <main+0x2a>

00000278 <_GLOBAL__sub_I_x10rec>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "x10Reciever.h"


x10Reciever x10rec(0b0110, 0b0110);
 278:	46 e0       	ldi	r20, 0x06	; 6
 27a:	66 e0       	ldi	r22, 0x06	; 6
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	01 c0       	rjmp	.+2      	; 0x284 <_ZN11x10RecieverC1Ehh>
 282:	08 95       	ret

00000284 <_ZN11x10RecieverC1Ehh>:
*/


#include "x10Reciever.h"

x10Reciever::x10Reciever(unsigned char houseCode, unsigned char unitNum)
 284:	fc 01       	movw	r30, r24
{
	m_state = IDLE;
 286:	10 82       	st	Z, r1
	m_houseCode = houseCode;
 288:	62 83       	std	Z+2, r22	; 0x02
	m_unitNum = unitNum;
 28a:	41 83       	std	Z+1, r20	; 0x01
	
	m_sBuffer = 0;
 28c:	14 82       	std	Z+4, r1	; 0x04
	m_data[0] = 0;
 28e:	15 82       	std	Z+5, r1	; 0x05
	m_data[1] = 0;
 290:	16 82       	std	Z+6, r1	; 0x06
	
	m_count = 0;
 292:	10 86       	std	Z+8, r1	; 0x08
 294:	08 95       	ret

00000296 <_ZN11x10Reciever4readEv>:
}

void x10Reciever::read()
{
 296:	fc 01       	movw	r30, r24
	switch(m_state)
 298:	80 81       	ld	r24, Z
 29a:	88 23       	and	r24, r24
 29c:	19 f0       	breq	.+6      	; 0x2a4 <_ZN11x10Reciever4readEv+0xe>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	59 f0       	breq	.+22     	; 0x2b8 <_ZN11x10Reciever4readEv+0x22>
 2a2:	08 95       	ret
	{
	case IDLE:
		// Add new value to small buffer.
		m_sBuffer = m_sBuffer << 1;
 2a4:	84 81       	ldd	r24, Z+4	; 0x04
 2a6:	88 0f       	add	r24, r24
 2a8:	84 83       	std	Z+4, r24	; 0x04
		if (PINB7 == 1)
			m_sBuffer |= 1;
		
		// If the correct start bit sequence is read, enter Recieving state.
		if ((m_sBuffer & 0xF) == 0b1110)
 2aa:	8f 70       	andi	r24, 0x0F	; 15
 2ac:	8e 30       	cpi	r24, 0x0E	; 14
 2ae:	41 f5       	brne	.+80     	; 0x300 <_ZN11x10Reciever4readEv+0x6a>
		{
			m_state = RECIEVING;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 83       	st	Z, r24
			m_count = 0;
 2b4:	10 86       	std	Z+8, r1	; 0x08
 2b6:	08 95       	ret
		}
		break;
		
	case RECIEVING:
		// Add carry from [0] to [1] in data array.
		m_data[1] = m_data[1] << 1;
 2b8:	26 81       	ldd	r18, Z+6	; 0x06
 2ba:	22 0f       	add	r18, r18
 2bc:	26 83       	std	Z+6, r18	; 0x06
		if ((m_data[0] & (1 << 7)) == 1)
			m_data[1] |= 1;
	
		// Add carry from suffix to [0] in data array.
		m_data[0] = m_data[0] << 1;
 2be:	35 81       	ldd	r19, Z+5	; 0x05
 2c0:	33 0f       	add	r19, r19
 2c2:	35 83       	std	Z+5, r19	; 0x05
		if ((m_suffix & 0b10) == 1)
			m_data[0] |= 1;
		
		// Add new value to suffix.
		m_suffix = m_suffix << 1;
 2c4:	97 81       	ldd	r25, Z+7	; 0x07
 2c6:	99 0f       	add	r25, r25
 2c8:	97 83       	std	Z+7, r25	; 0x07
		if (PINB7 == 1)
			m_suffix |= 1;
		
		// Increment counter.
		m_count++;
 2ca:	80 85       	ldd	r24, Z+8	; 0x08
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	80 87       	std	Z+8, r24	; 0x08
		
		// If both m_data and m_suffix is filled.
		if (m_count >= 18)
 2d0:	82 31       	cpi	r24, 0x12	; 18
 2d2:	b0 f0       	brcs	.+44     	; 0x300 <_ZN11x10Reciever4readEv+0x6a>
		{
			// If house code doesn't match, ignore message.
			if (m_houseCode != m_data[1])
 2d4:	82 81       	ldd	r24, Z+2	; 0x02
 2d6:	28 13       	cpse	r18, r24
 2d8:	13 c0       	rjmp	.+38     	; 0x300 <_ZN11x10Reciever4readEv+0x6a>
				return;
			
			switch(m_suffix & 0b11)
 2da:	93 70       	andi	r25, 0x03	; 3
 2dc:	91 30       	cpi	r25, 0x01	; 1
 2de:	19 f0       	breq	.+6      	; 0x2e6 <_ZN11x10Reciever4readEv+0x50>
 2e0:	92 30       	cpi	r25, 0x02	; 2
 2e2:	49 f0       	breq	.+18     	; 0x2f6 <_ZN11x10Reciever4readEv+0x60>
 2e4:	0b c0       	rjmp	.+22     	; 0x2fc <_ZN11x10Reciever4readEv+0x66>
			{
			// Suffix == UNIT CODE.
			case 0b01:
				// If message IS for this unit.
				if (m_unitNum == m_data[0])
 2e6:	81 81       	ldd	r24, Z+1	; 0x01
 2e8:	38 13       	cpse	r19, r24
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <_ZN11x10Reciever4readEv+0x5c>
					m_isActive = true;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	83 83       	std	Z+3, r24	; 0x03
 2f0:	05 c0       	rjmp	.+10     	; 0x2fc <_ZN11x10Reciever4readEv+0x66>
				// If message is NOT for this unit.
				else
					m_isActive = false;
 2f2:	13 82       	std	Z+3, r1	; 0x03
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <_ZN11x10Reciever4readEv+0x66>
				break;
			
			// Suffix == COMMAND CODE.
			case 0b10:
				// If reciever HASN'T been activated --> Message ISN'T for this unit.
				if (!m_isActive)
 2f6:	83 81       	ldd	r24, Z+3	; 0x03
 2f8:	88 23       	and	r24, r24
 2fa:	11 f0       	breq	.+4      	; 0x300 <_ZN11x10Reciever4readEv+0x6a>
					break;
				}
				break;
			}
			
			m_state = RECIEVING;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	80 83       	st	Z, r24
 300:	08 95       	ret

00000302 <__tablejump2__>:
 302:	ee 0f       	add	r30, r30
 304:	ff 1f       	adc	r31, r31
 306:	88 1f       	adc	r24, r24
 308:	8b bf       	out	0x3b, r24	; 59
 30a:	07 90       	elpm	r0, Z+
 30c:	f6 91       	elpm	r31, Z
 30e:	e0 2d       	mov	r30, r0
 310:	19 94       	eijmp

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
